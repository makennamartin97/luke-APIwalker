{"version":3,"sources":["components/Info.jsx","components/Error.jsx","App.js","serviceWorker.js","index.js"],"names":["Info","props","useState","type","ID","result","setresult","useEffect","getData","setsearchtype","setsearchID","axios","get","then","response","console","log","data","catch","err","navigate","className","name","gender","birth_year","height","mass","eye_color","climate","diameter","terrain","population","model","manufacturer","length","crew","passengers","Error","src","width","alt","App","searchtype","searchID","onSubmit","e","preventDefault","value","onChange","target","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.89929c62.chunk.js","sourcesContent":["import { Router, navigate } from '@reach/router';\nimport React, { useState ,useEffect} from 'react';\nimport axios from 'axios';\n\nconst Info = (props) => {\n  const [type, settype] = useState(\"\");\n  const [ID, setID] = useState();\n  const [result, setresult] = useState({});\n\n\n  useEffect(() => {        \n    getData();\n    props.setsearchtype(props.type);\n    props.setsearchID(props.ID);\n    }, [props.type, props.ID]);\n\n  const getData = () => {\n    axios.get(`https://swapi.dev/api/${props.type}/${props.ID}/`)\n      .then(\n        response => {\n        console.log(type)\n        console.log(ID)\n        setresult(response.data);\n      }\n    ).catch(\n      err => {\n        navigate(`/error`);\n      }\n    );\n  };\n\n\n\n  return (\n    <>\n\n        <div className=\"text-center mt-4\" >\n          { \n            props.type === \"people\" ?\n          <>\n      \n            <h4>{result.name}</h4>\n            <p>Gender: {result.gender}</p>\n            <p>Birth Year: {result.birth_year}</p>\n            <p>Height: {result.height} cm</p>\n            <p>Weight: {result.mass} kg</p>\n            <p>Eye Color: {result.eye_color}</p>\n         \n          </>\n          \n            \n       \n          : \"\"\n          }\n          \n          { props.type === \"planets\" ?\n          <>\n       \n            <h4>{result.name}</h4>\n            <p>Climate: {result.climate}</p>\n            <p>Diameter: {result.diameter}</p>\n            <p>Terrain: {result.terrain}</p>\n            <p>Population: {result.population}</p>\n          </>\n          \n          : \"\"\n        \n          }\n          { props.type === \"starships\" ?\n          <>\n            <h4>{result.name}</h4>\n            <p>Model: {result.model}</p>\n            <p>Manufacturer: {result.manufacturer}</p>\n            <p>Length: {result.length}</p>\n            <p>Crew: {result.crew}</p>\n            <p>Passengers: {result.passengers}</p>\n            \n          </>\n          : \"\"\n          }\n\n        </div>\n        \n\n    </>\n  );\n}\n\n\n\nexport default Info;","import { Router, Link, navigate } from '@reach/router';\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\n\n\n\nconst Error = props => {\n    const pic = [\"img/obi.png\"];\n    return(\n        <>\n            <div className=\"text-center text-danger mt-4\">\n                <h6>ERROR: These aren't the droids you're looking for!</h6>\n                <div className=\"mt-4\">\n                    <img src={pic[0]} width=\"270px\" alt=\"error\"></img>\n\n                </div>\n            \n                \n            </div>\n        </>\n    )\n}\n\n\n\n\n\n\n\n\nexport default Error;","import { Router, Link, navigate } from '@reach/router';\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Info from './components/Info';\nimport Error from './components/Error';\n\n\nfunction App() {\n  const [searchtype, setsearchtype] = useState();\n  const [searchID, setsearchID] = useState();\n\n  const onSubmit = e => {\n      e.preventDefault();\n      navigate(`/${searchtype}/${searchID}`);\n    };\n  \n  \n  \n  return (\n    <>\n      <div className=\"container-full-bg\">\n        <div className=\"jumbotron lead\">Your Go-To Star Wars API </div>\n      </div>\n      <div className=\"text-center\">\n        <form onSubmit={onSubmit}>\n          <div className=\"form-group text-center\">\n            <p className=\"text-muted\">Search for:</p>\n            <select className=\"dropdown col-md-1 text-center\" value={searchtype} onChange={e => setsearchtype(e.target.value)}>\n              <option value=\"\"></option>\n              <option value=\"planets\">Planets</option>\n              <option value=\"people\">People</option>\n              <option value=\"starships\">Starships</option>\n            </select>\n          </div>\n          <div className=\"form-group\">\n            <p className=\"text-muted\">Enter ID:</p>\n            <input type=\"text\"className=\"form-group col-md-2 text-center\" onChange={e => setsearchID(e.target.value)} type=\"number\" value={searchID}/>\n          </div>\n          <input type=\"submit\" value=\"Search the Galaxy\" className=\"btn btn-secondary\" />\n\n        </form>\n      </div>\n      <Router>\n        <Info path=\"/:type/:ID\" setsearchtype={setsearchtype} setsearchID={setsearchID}/>\n        <Error path=\"/error\"/>\n      </Router>\n\n\n\n\n\n    </>\n  )\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}